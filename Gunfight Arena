local players = findservice(Game, 'Players')
local workspace = findservice(Game, 'Workspace')

local localplayer = getlocalplayer()
local localname = getname(localplayer)

local cache = {}
local LastCheckTime = 0
local ResetThreshold = 5
local LastFullReset = 0
local ForceRefreshInterval = 30

local function GetBodyParts(Model)
    return {
        Head = findfirstchild(Model, "Head"),
        UpperTorso = findfirstchild(Model, "UpperTorso"),
        LowerTorso = findfirstchild(Model, "LowerTorso"),
        Torso = findfirstchild(Model, "Torso"),

        LeftUpperArm = findfirstchild(Model, "LeftUpperArm"),
        LeftLowerArm = findfirstchild(Model, "LeftLowerArm"),
        LeftHand = findfirstchild(Model, "LeftHand"),
        LeftArm = findfirstchild(Model, "Left Arm"),

        RightUpperArm = findfirstchild(Model, "RightUpperArm"),
        RightLowerArm = findfirstchild(Model, "RightLowerArm"),
        RightHand = findfirstchild(Model, "RightHand"),
        RightArm = findfirstchild(Model, "Right Arm"),

        LeftUpperLeg = findfirstchild(Model, "LeftUpperLeg"),
        LeftLowerLeg = findfirstchild(Model, "LeftLowerLeg"),
        LeftFoot = findfirstchild(Model, "LeftFoot"),
        LeftLeg = findfirstchild(Model, "Left Leg"),

        RightUpperLeg = findfirstchild(Model, "RightUpperLeg"),
        RightLowerLeg = findfirstchild(Model, "RightLowerLeg"),
        RightFoot = findfirstchild(Model, "RightFoot"),
        RightLeg = findfirstchild(Model, "Right Leg"),

        HumanoidRootPart = findfirstchild(Model, "HumanoidRootPart"),
    }
end

local function IsValidModel(Model)
    if not Model or not getparent(Model) then 
        return false 
    end

    local humanoid = findfirstchild(Model, "Humanoid")
    if not humanoid or not getparent(humanoid) then 
        return false 
    end

    local rootpart = findfirstchild(Model, "HumanoidRootPart")
    if not rootpart or not getparent(rootpart) then 
        return false 
    end

    local head = findfirstchild(Model, "Head")
    if not head or not getparent(head) then 
        return false 
    end

    if getname(Model) == localname then
        return false
    end

    for _, player in getchildren(players) do
        if getcharacter(player) == Model then
            if getteam(player) == getteam(localplayer) then
                return false
            end
            break
        end
    end

    return true
end

local function setup_entity(playerModel)
    if not IsValidModel(playerModel) then
        return
    end

    local humanoid = findfirstchild(playerModel, "Humanoid")
    local Parts = GetBodyParts(playerModel)
    local head = Parts.Head
    local rootpart = Parts.HumanoidRootPart
    local upperTorso = Parts.UpperTorso or Parts.Torso
    local lowerTorso = Parts.LowerTorso or Parts.Torso

    local temp = {
        primary = playerModel,
        class = "live",
        _class = "human",
        humanoid = humanoid,
        rootpart = rootpart,
        health = gethealth(humanoid)
    }

    local data = {
        Username = getname(playerModel),
        Displayname = getname(playerModel),
        Userid = 0,
        Character = playerModel,
        PrimaryPart = rootpart,
        Humanoid = humanoid,
        Head = head,
        Torso = upperTorso,
        UpperTorso = upperTorso,
        LowerTorso = lowerTorso,
        LeftArm = Parts.LeftArm or Parts.LeftUpperArm,
        LeftLeg = Parts.LeftLeg or Parts.LeftUpperLeg,
        RightArm = Parts.RightArm or Parts.RightUpperArm,
        RightLeg = Parts.RightLeg or Parts.RightUpperLeg,
        LeftUpperArm = Parts.LeftUpperArm,
        LeftLowerArm = Parts.LeftLowerArm,
        LeftHand = Parts.LeftHand,
        RightUpperArm = Parts.RightUpperArm,
        RightLowerArm = Parts.RightLowerArm,
        RightHand = Parts.RightHand,
        LeftUpperLeg = Parts.LeftUpperLeg,
        LeftLowerLeg = Parts.LeftLowerLeg,
        LeftFoot = Parts.LeftFoot,
        RightUpperLeg = Parts.RightUpperLeg,
        RightLowerLeg = Parts.RightLowerLeg,
        RightFoot = Parts.RightFoot,
        BodyHeightScale = 1,
        RigType = Parts.Torso and 0 or 1,
        Whitelisted = false,
        Archenemies = false,
        Aimbot_Part = head,
        Aimbot_TP_Part = head,
        Triggerbot_Part = head,
        Health = gethealth(humanoid),
        MaxHealth = getmaxhealth(humanoid),
        body_parts_data = {
            { name = "LowerTorso", part = lowerTorso },
            { name = "LeftUpperLeg", part = Parts.LeftUpperLeg },
            { name = "LeftLowerLeg", part = Parts.LeftLowerLeg },
            { name = "RightUpperLeg", part = Parts.RightUpperLeg },
            { name = "RightLowerLeg", part = Parts.RightLowerLeg },
            { name = "LeftUpperArm", part = Parts.LeftUpperArm },
            { name = "LeftLowerArm", part = Parts.LeftLowerArm },
            { name = "RightUpperArm", part = Parts.RightUpperArm },
            { name = "RightLowerArm", part = Parts.RightLowerArm },
        },
        full_body_data = {
            { name = "Head", part = head },
            { name = "UpperTorso", part = upperTorso },
            { name = "LowerTorso", part = lowerTorso },
            { name = "HumanoidRootPart", part = rootpart },
            { name = "LeftUpperArm", part = Parts.LeftUpperArm },
            { name = "LeftLowerArm", part = Parts.LeftLowerArm },
            { name = "LeftHand", part = Parts.LeftHand },
            { name = "RightUpperArm", part = Parts.RightUpperArm },
            { name = "RightLowerArm", part = Parts.RightLowerArm },
            { name = "RightHand", part = Parts.RightHand },
            { name = "LeftUpperLeg", part = Parts.LeftUpperLeg },
            { name = "LeftLowerLeg", part = Parts.LeftLowerLeg },
            { name = "LeftFoot", part = Parts.LeftFoot },
            { name = "RightUpperLeg", part = Parts.RightUpperLeg },
            { name = "RightLowerLeg", part = Parts.RightLowerLeg },
            { name = "RightFoot", part = Parts.RightFoot },
        }
    }

    add_model_data(data, tostring(playerModel))
    cache[tostring(playerModel)] = temp
end

local function CleanupAllTrackedModels()
    for Key, _ in pairs(cache) do
        remove_model_data(Key)
    end
    cache = {}
end

local function setup_cache()
    while wait(1 / 30) do
        local CurrentTime = os.time()

        if CurrentTime - LastFullReset > ForceRefreshInterval then
            CleanupAllTrackedModels()
            LastFullReset = CurrentTime
        end

        local ValidPlayers = {}
        local Seen = {}

        for _, child in getchildren(workspace) do
            if findfirstchild(child, "Humanoid") then
                if IsValidModel(child) then
                    table.insert(ValidPlayers, child)
                    local Key = tostring(child)
                    Seen[Key] = true

                    if not cache[Key] then
                        setup_entity(child)
                    end
                end
            end
        end

        for Key, entry in pairs(cache) do
            if not Seen[Key] then
                remove_model_data(Key)
                cache[Key] = nil
            end
        end

        if #ValidPlayers == 0 then
            if CurrentTime - LastCheckTime > ResetThreshold then
                CleanupAllTrackedModels()
            end
        else
            LastCheckTime = CurrentTime
        end
    end
end

local function updater()
    while wait(1 / 240) do
        for index, entry in cache do
            local primary = entry.primary
            local rootpart = entry.rootpart
            local humanoid = entry.humanoid

            if rootpart and isdescendantof(primary, workspace) and getparent(humanoid) then
                local _health = gethealth(humanoid)
                if _health ~= entry.health then
                    local data = {
                        Health = _health,
                        MaxHealth = getmaxhealth(humanoid)
                    }
                    edit_model_data(data, index)
                    entry.health = _health
                end
            else
                remove_model_data(index)
                cache[index] = nil
            end
        end
    end
end

clear_model_data()
LastFullReset = os.time()
LastCheckTime = os.time()
spawn(setup_cache)
spawn(updater)
