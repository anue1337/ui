local players = findservice(Game, 'Players')
local workspace = findservice(Game, 'Workspace')

local live_folder = findfirstchild(workspace, 'Live')
local thrown_folder = findfirstchild(workspace, 'Thrown')

local localplayer = getlocalplayer()
local localname = getname(localplayer)

local cache = {}
local function setup_entity(primary, class)
    local temp = {
        primary = primary,
        class = class
    }

    if class == 'live' then
        local humanoid = findfirstchild(primary, 'Humanoid')
        if not humanoid then 
            return
        end

        local rootpart = findfirstchild(primary, 'HumanoidRootPart')
        if not rootpart then 
            return 
        end

        temp.humanoid = humanoid
        temp.rootpart = rootpart

        local name = getname(primary)
        local torso = findfirstchild(primary, 'Torso')
        local shirt = findfirstchild(primary, 'Shirt')
        local _class = 'mob'
        
        if (torso and shirt) then
            local is_player = findfirstchild(players, name)
            _class = 'human'

            local health = gethealth(humanoid)
            temp.health = health

            local new = is_player and name or string.match(name, '([%a_]+)')
            local data = {
                Username = new,
                Displayname = new,
                Userid = 0,
                Character = primary,
                PrimaryPart = rootpart,
                Humanoid = humanoid,
                Head = findfirstchild(primary, 'Head') or rootpart,
                Torso = findfirstchild(primary, 'Torso') or rootpart,
                LeftArm = findfirstchild(primary, 'Left Arm') or rootpart,
                LeftLeg = findfirstchild(primary, 'Left Leg') or rootpart,
                RightArm = findfirstchild(primary, 'Right Arm') or rootpart,
                RightLeg = findfirstchild(primary, 'Right Leg') or rootpart,
                BodyHeightScale = 1,
                RigType = 0,
                Whitelisted = false,
                Archenemies = false,
                Aimbot_Part = rootpart,
                Aimbot_TP_Part = rootpart,
                Triggerbot_Part = rootpart,
                Health = health,
                MaxHealth = getmaxhealth(humanoid)
            }
    
            add_model_data(data, tostring(primary))
        else
            local new = string.match(name, '([%a_]+)')
            local data = {
                Username = new,
                Displayname = new,
                Userid = 0,
                Character = primary,
                PrimaryPart = rootpart,
                Humanoid = humanoid,
                Head = rootpart,
                LeftLeg = rootpart,
                LeftArm = rootpart,
                RightLeg = rootpart,
                RightArm = rootpart,
                BodyHeightScale = 1,
                Torso = rootpart,
                RigType = 0,
                Whitelisted = false,
                Archenemies = false,
                Aimbot_Part = rootpart,
                Aimbot_TP_Part = rootpart,
                Triggerbot_Part = rootpart,
                Health = gethealth(humanoid),
                MaxHealth = getmaxhealth(humanoid)
            }
    
            add_model_data(data, tostring(primary))
        end

        temp._class = _class
        cache[tostring(primary)] = temp
    elseif class == 'chest' then
        local temp = {
            primary = primary,
            class = class
        }

        local rootpart = findfirstchild(primary, 'RootPart')
        if not rootpart then 
            return 
        end

        temp.rootpart = rootpart

        local data = {
            Username = 'Chest',
            Displayname = 'Chest',
            Userid = 0,
            Character = primary,
            PrimaryPart = rootpart,
            Humanoid = rootpart,
            Head = rootpart,
            Torso = rootpart,
            LeftArm = rootpart,
            LeftLeg = rootpart,
            RightArm = rootpart,
            RightLeg = rootpart,
            BodyHeightScale = 1,
            RigType = 0,
            Whitelisted = false,
            Archenemies = false,
            Aimbot_Part = rootpart,
            Aimbot_TP_Part = rootpart,
            Triggerbot_Part = rootpart,
            Health = 100,
            MaxHealth = 100
        }

        add_model_data(data, tostring(primary))
        cache[tostring(primary)] = temp
    end
end

local function setup_cache()
    while wait(1 / 30) do
        for _, child in getchildren(live_folder) do
            if getname(child) ~= localname and not cache[tostring(child)]  then
                setup_entity(child, 'live')
            end
        end

        for _, child in getchildren(thrown_folder) do
            if getclassname(child) == 'Model' then
                local lid = findfirstchild(child, 'Lid')
                if lid and not cache[tostring(child)] then
                    setup_entity(child, 'chest')
                end
            end
        end
    end
end

local function updater()
    while wait(1 / 240) do
        for index, entry in cache do
            if entry.class == 'live' then
                local _class = entry._class
                local rootpart = entry.rootpart
                local humanoid = entry.humanoid

                if rootpart and isdescendantof(entry.primary, live_folder) then
                    local data = {
                        MaxHealth = getmaxhealth(humanoid)
                    }

                    local _health = gethealth(humanoid)
                    if _health ~= entry.health then
                        data.Health = _health
                        entry.health = _health
                    end

                    if _class == 'human' and findfirstchild(rootpart, 'GraspPassiveParticle') then
                        data.Archenemies = true
                    else
                        data.Archenemies = false
                    end

                    edit_model_data(data, index)
                else
                    remove_model_data(index)
                    cache[index] = nil
                    continue
                end
            elseif entry.class == 'chest' then
                local rootpart = entry.rootpart
                if not rootpart and not isdescendantof(entry.primary, thrown_folder) then
                    remove_model_data(index)
                    cache[index] = nil
                    continue
                end
            end
        end
    end
end

spawn(setup_cache)
spawn(updater)
